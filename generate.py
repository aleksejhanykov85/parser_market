import pandas as pd
from openai import AsyncOpenAI
from dotenv import load_dotenv
import os
import asyncio
import random

load_dotenv()
AI_TOKEN = os.getenv('AI_TOKEN')

client = AsyncOpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=AI_TOKEN,
)

# –ú–æ–¥–µ–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
models_to_try = [
    "minimax/minimax-m2:free",
    "meta-llama/llama-3.1-8b-instruct:free",
    "qwen/qwen-2.5-14b-instruct:free",
    "microsoft/wizardlm-2-7b:free"
]

async def ai_generate_from_csv():
    try:
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª—ã
        df1 = pd.read_csv(r'reviews_com.logistic.sdek\reviews_1_stars.csv')
        df2 = pd.read_csv(r'reviews_com.logistic.sdek\reviews_5_stars.csv')
        
        # –ë–µ—Ä–µ–º –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        df1_sample = df1.head(10)
        df2_sample = df2.head(10)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        csv1_text = df1_sample.to_string(index=False)
        csv2_text = df2_sample.to_string(index=False)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ CSV
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –æ—Ç–∑—ã–≤—ã –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –°–î–≠–ö:

–û–¢–ó–´–í–´ –° 1 –ó–í–ï–ó–î–û–ô (–ø—Ä–æ–±–ª–µ–º—ã):
{csv1_text}

–û–¢–ó–´–í–´ –° 5 –ó–í–ï–ó–î–ê–ú–ò (–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞):
{csv2_text}

–í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º.
"""
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        max_retries = 3
        
        for model in models_to_try:
            for attempt in range(max_retries):
                try:
                    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} —Å –º–æ–¥–µ–ª—å—é: {model}")
                    
                    # –°–õ–£–ß–ê–ô–ù–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê –æ—Ç 60 –¥–æ 120 —Å–µ–∫—É–Ω–¥
                    # wait_time = random.randint(60, 120)
                    # print(f"‚è≥ –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞...")
                    # await asyncio.sleep(wait_time)
                    
                    completion = await client.chat.completions.create(
                        model=model,
                        messages=[
                            {
                                "role": "system", 
                                "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞."
                            },
                            {
                                "role": "user", 
                                "content": prompt
                            }
                        ],
                        max_tokens=800,  # –°–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                        temperature=0.3
                    )
                    
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}")
                    return completion.choices[0].message.content
                    
                except Exception as e:
                    error_msg = str(e)
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {error_msg}")
                    
                    if "rate-limited" in error_msg or "429" in error_msg:
                        if attempt < max_retries - 1:
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
                            extended_wait = random.randint(90, 180)
                            print(f"üö´ –õ–∏–º–∏—Ç! –ñ–¥–µ–º {extended_wait} —Å–µ–∫—É–Ω–¥...")
                            await asyncio.sleep(extended_wait)
                            continue
                        else:
                            print(f"üö´ –ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é...")
                            continue
                    else:
                        continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        return create_fallback_analysis(df1, df2)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

def create_fallback_analysis(df1, df2):
    """–°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    print("‚ö†Ô∏è –í—Å–µ AI –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    total_negative = len(df1)
    total_positive = len(df2)
    
    analysis = f"""
–ê–ù–ê–õ–ò–ó –û–¢–ó–´–í–û–í –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –°–î–≠–ö
(–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)

–°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (1 –∑–≤–µ–∑–¥–∞): {total_negative}
- –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (5 –∑–≤–µ–∑–¥): {total_positive}
- –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {total_positive/(total_positive+total_negative)*100:.1f}% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö

–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ü–µ–Ω—è—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —É–¥–æ–±—Å—Ç–≤–æ –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

–î–õ–Ø –î–ï–¢–ê–õ–¨–ù–û–ì–û AI –ê–ù–ê–õ–ò–ó–ê:
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –Ω–µ–ø–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è (–Ω–æ—á—å—é –∏–ª–∏ —Ä–∞–Ω–æ —É—Ç—Ä–æ–º).
"""
    return analysis

async def create_analyze_file():
    try:
        text = await ai_generate_from_csv()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É —Å –æ—Ç–∑—ã–≤–∞–º–∏
        output_path = 'reviews_analyze.txt'
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(text)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
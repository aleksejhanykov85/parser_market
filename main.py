from google_play_scraper import app, reviews, Sort
import pandas as pd
import os
from datetime import datetime

def get_app_details(package_name, lang='ru', country='ru'):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    try:
        print(f"üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ {package_name}...")
        return app(package_name, lang=lang, country=country)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def get_all_reviews(package_name, lang='ru', country='ru', max_reviews=300):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã"""
    try:
        print("üìù –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–∑—ã–≤—ã...")
        all_reviews = []
        continuation_token = None
        
        while len(all_reviews) < max_reviews:
            reviews_batch, continuation_token = reviews(
                package_name,
                lang=lang,
                country=country,
                sort=Sort.NEWEST,
                count=100,
                continuation_token=continuation_token
            )
            
            if not reviews_batch:
                break
                
            all_reviews.extend(reviews_batch)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(all_reviews)} –æ—Ç–∑—ã–≤–æ–≤...")
            
            if continuation_token is None:
                break
        
        return all_reviews[:max_reviews]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def sort_reviews_by_rating(reviews_list):
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥"""
    sorted_reviews = {1: [], 2: [], 3: [], 4: [], 5: []}
    
    for review in reviews_list:
        rating = review['score']
        if 1 <= rating <= 5:
            sorted_reviews[rating].append(review)
    
    return sorted_reviews

def save_reviews_to_csv(sorted_reviews, folder_name):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤—ã –≤ CSV —Ñ–∞–π–ª—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º"""
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤—ã –≤ CSV...")
    
    for rating in range(1, 6):
        reviews_list = sorted_reviews[rating]
        if reviews_list:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π DataFrame
            data = []
            for review in reviews_list:
                data.append({
                    'userName': review['userName'],
                    'rating': review['score'],
                    'date': str(review['at']),  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                    'review': review['content'],
                    'developer_reply': review.get('replyContent', ''),
                    'likes': review.get('thumbsUpCount', 0)
                })
            
            df = pd.DataFrame(data)
            filename = f"{folder_name}/reviews_{rating}_stars.csv"
            df.to_csv(filename, index=False, encoding='utf-8-sig')
            print(f"‚úÖ {rating} –∑–≤–µ–∑–¥: {len(reviews_list)} –æ—Ç–∑—ã–≤–æ–≤")

def save_all_reviews_csv(sorted_reviews, folder_name):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –≤ –æ–¥–∏–Ω CSV"""
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª...")
    
    all_data = []
    for rating in range(1, 6):
        for review in sorted_reviews[rating]:
            all_data.append({
                'userName': review['userName'],
                'rating': review['score'],
                'stars': rating,
                'date': str(review['at']),
                'review': review['content'],
                'developer_reply': review.get('replyContent', ''),
                'likes': review.get('thumbsUpCount', 0)
            })
    
    if all_data:
        df = pd.DataFrame(all_data)
        df.to_csv(f"{folder_name}/all_reviews.csv", index=False, encoding='utf-8-sig')
        print(f"‚úÖ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(all_data)}")

def create_simple_report(sorted_reviews, app_title, package_name, folder_name):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –æ—Ç—á–µ—Ç"""
    total_reviews = sum(len(reviews) for reviews in sorted_reviews.values())
    
    report = f"""–û–¢–ß–ï–¢ –ü–û –û–¢–ó–´–í–ê–ú
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_title}
–ü–∞–∫–µ—Ç: {package_name}
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}
–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}

–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–≤–µ–∑–¥–∞–º:
"""
    for rating in range(1, 6):
        count = len(sorted_reviews[rating])
        percent = (count / total_reviews * 100) if total_reviews > 0 else 0
        report += f"{rating} –∑–≤–µ–∑–¥: {count} ({percent:.1f}%)\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open(f"{folder_name}/report.txt", 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(report)

def show_examples(sorted_reviews):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤"""
    print("\nüìã –ü–†–ò–ú–ï–†–´ –û–¢–ó–´–í–û–í:")
    print("=" * 50)
    
    for rating in range(1, 6):
        reviews_list = sorted_reviews[rating]
        if reviews_list:
            print(f"\n‚≠ê {rating} –∑–≤–µ–∑–¥ ({len(reviews_list)} –æ—Ç–∑—ã–≤–æ–≤):")
            for i, review in enumerate(reviews_list[:2], 1):
                print(f"{i}. {review['content'][:80]}...")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    PACKAGE_NAME = 'com.logistic.sdek'
    LANGUAGE = 'ru'
    COUNTRY = 'ru'
    MAX_REVIEWS = 200
    
    print("üöÄ –ó–ê–ü–£–°–ö –°–ë–û–†–ê –û–¢–ó–´–í–û–í")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    app_details = get_app_details(PACKAGE_NAME, LANGUAGE, COUNTRY)
    if not app_details:
        return
    
    print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_details['title']}")
    print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {app_details['score']}")
    print(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∏: {app_details['installs']}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
    all_reviews = get_all_reviews(PACKAGE_NAME, LANGUAGE, COUNTRY, MAX_REVIEWS)
    if not all_reviews:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã")
        return
    
    print(f"‚úÖ –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(all_reviews)}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    sorted_reviews = sort_reviews_by_rating(all_reviews)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    show_examples(sorted_reviews)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    timestamp = datetime.now().strftime("%Y%m%d_%H%M")
    folder_name = f"reviews_{PACKAGE_NAME}_{timestamp}"
    os.makedirs(folder_name, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_reviews_to_csv(sorted_reviews, folder_name)
    save_all_reviews_csv(sorted_reviews, folder_name)
    create_simple_report(sorted_reviews, app_details['title'], PACKAGE_NAME, folder_name)
    
    print(f"\nüéâ –ì–û–¢–û–í–û!")
    print(f"üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: {folder_name}")
    print("\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("- reviews_1_stars.csv - –æ—Ç–∑—ã–≤—ã —Å 1 –∑–≤–µ–∑–¥–æ–π")
    print("- reviews_2_stars.csv - –æ—Ç–∑—ã–≤—ã —Å 2 –∑–≤–µ–∑–¥–∞–º–∏") 
    print("- reviews_3_stars.csv - –æ—Ç–∑—ã–≤—ã —Å 3 –∑–≤–µ–∑–¥–∞–º–∏")
    print("- reviews_4_stars.csv - –æ—Ç–∑—ã–≤—ã —Å 4 –∑–≤–µ–∑–¥–∞–º–∏")
    print("- reviews_5_stars.csv - –æ—Ç–∑—ã–≤—ã —Å 5 –∑–≤–µ–∑–¥–∞–º–∏")
    print("- all_reviews.csv - –≤—Å–µ –æ—Ç–∑—ã–≤—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ")
    print("- report.txt - —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç")

if __name__ == "__main__":
    main()